SYNCHRONIZATION:

Data sync is most important in MeshInstanceGrid::[add|remove]Instance method.
Up to this point everything runs only on master node.
When a RoomSegmentMesh is updated (i.e. instance added/removed) it first updates a CPU side buffer.
Before each frame this whole buffer is synced with all nodes.
After sync each node uploads data to GPU.

The render command and uniform updates must also be made on each node.
This is done by RoomSegmentMeshPool.
RoomSegmentMeshPool manages mesh and shader resources and uniform variables and can render all its meshes.
Therefore it has to exist on all nodes all the time.

The camera can be modified only by the master node,
but the current camera matrix has to be shared with slave nodes for rendering.

GameMeshes aka MeshRenderables can be created and rendered entirely on all nodes.

The automaton can run entirely always on master node.
As soon as states change it calls MeshInstanceGrid:[add|remove]Instance.

A problem to be solved later is state interpolation for automaton.
For interpolating states of the automaton the last and next automaton texture is needed as well as the transition time delta.
If the automaton runs only on master node the textures must downloaded from GPU, then synced with slaves and then uploaded again.
Because the automaton textures contain build states and health (like instance buffer), care must be taken to not sync too much redundant data.
The transition is constant and therefore does not have to be synced.
